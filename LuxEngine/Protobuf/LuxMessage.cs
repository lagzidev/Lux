// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: LuxMessage.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace LuxMessage {

  /// <summary>Holder for reflection information generated from LuxMessage.proto</summary>
  public static partial class LuxMessageReflection {

    #region Descriptor
    /// <summary>File descriptor for LuxMessage.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static LuxMessageReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChBMdXhNZXNzYWdlLnByb3RvEgpMdXhNZXNzYWdlIjsKCkx1eE1lc3NhZ2US",
            "IgoFaW5wdXQYASABKAsyES5MdXhNZXNzYWdlLklucHV0SABCCQoHbWVzc2Fn",
            "ZSLsAQoFSW5wdXQSCgoCVXAYASABKAgSDAoERG93bhgCIAEoCBINCgVSaWdo",
            "dBgDIAEoCBIMCgRMZWZ0GAQgASgIEhQKDFVwS2V5UHJlc3NlZBgFIAEoCBIW",
            "Cg5Eb3duS2V5UHJlc3NlZBgGIAEoCBIXCg9SaWdodEtleVByZXNzZWQYByAB",
            "KAgSFgoOTGVmdEtleVByZXNzZWQYCCABKAgSEgoKRjRLZXlQcmVzcxgJIAEo",
            "CBIKCgJGNBgKIAEoCBIVCg1GNUtleVJlbGVhc2VkGAsgASgIEgoKAkY1GAwg",
            "ASgIEgoKAkY2GA0gASgIYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::LuxMessage.LuxMessage), global::LuxMessage.LuxMessage.Parser, new[]{ "Input" }, new[]{ "Message" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::LuxMessage.Input), global::LuxMessage.Input.Parser, new[]{ "Up", "Down", "Right", "Left", "UpKeyPressed", "DownKeyPressed", "RightKeyPressed", "LeftKeyPressed", "F4KeyPress", "F4", "F5KeyReleased", "F5", "F6" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class LuxMessage : pb::IMessage<LuxMessage> {
    private static readonly pb::MessageParser<LuxMessage> _parser = new pb::MessageParser<LuxMessage>(() => new LuxMessage());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LuxMessage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::LuxMessage.LuxMessageReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LuxMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LuxMessage(LuxMessage other) : this() {
      switch (other.MessageCase) {
        case MessageOneofCase.Input:
          Input = other.Input.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LuxMessage Clone() {
      return new LuxMessage(this);
    }

    /// <summary>Field number for the "input" field.</summary>
    public const int InputFieldNumber = 1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::LuxMessage.Input Input {
      get { return messageCase_ == MessageOneofCase.Input ? (global::LuxMessage.Input) message_ : null; }
      set {
        message_ = value;
        messageCase_ = value == null ? MessageOneofCase.None : MessageOneofCase.Input;
      }
    }

    private object message_;
    /// <summary>Enum of possible cases for the "message" oneof.</summary>
    public enum MessageOneofCase {
      None = 0,
      Input = 1,
    }
    private MessageOneofCase messageCase_ = MessageOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MessageOneofCase MessageCase {
      get { return messageCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMessage() {
      messageCase_ = MessageOneofCase.None;
      message_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LuxMessage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LuxMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Input, other.Input)) return false;
      if (MessageCase != other.MessageCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (messageCase_ == MessageOneofCase.Input) hash ^= Input.GetHashCode();
      hash ^= (int) messageCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (messageCase_ == MessageOneofCase.Input) {
        output.WriteRawTag(10);
        output.WriteMessage(Input);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (messageCase_ == MessageOneofCase.Input) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Input);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LuxMessage other) {
      if (other == null) {
        return;
      }
      switch (other.MessageCase) {
        case MessageOneofCase.Input:
          if (Input == null) {
            Input = new global::LuxMessage.Input();
          }
          Input.MergeFrom(other.Input);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            global::LuxMessage.Input subBuilder = new global::LuxMessage.Input();
            if (messageCase_ == MessageOneofCase.Input) {
              subBuilder.MergeFrom(Input);
            }
            input.ReadMessage(subBuilder);
            Input = subBuilder;
            break;
          }
        }
      }
    }

  }

  public sealed partial class Input : pb::IMessage<Input> {
    private static readonly pb::MessageParser<Input> _parser = new pb::MessageParser<Input>(() => new Input());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Input> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::LuxMessage.LuxMessageReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Input() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Input(Input other) : this() {
      up_ = other.up_;
      down_ = other.down_;
      right_ = other.right_;
      left_ = other.left_;
      upKeyPressed_ = other.upKeyPressed_;
      downKeyPressed_ = other.downKeyPressed_;
      rightKeyPressed_ = other.rightKeyPressed_;
      leftKeyPressed_ = other.leftKeyPressed_;
      f4KeyPress_ = other.f4KeyPress_;
      f4_ = other.f4_;
      f5KeyReleased_ = other.f5KeyReleased_;
      f5_ = other.f5_;
      f6_ = other.f6_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Input Clone() {
      return new Input(this);
    }

    /// <summary>Field number for the "Up" field.</summary>
    public const int UpFieldNumber = 1;
    private bool up_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Up {
      get { return up_; }
      set {
        up_ = value;
      }
    }

    /// <summary>Field number for the "Down" field.</summary>
    public const int DownFieldNumber = 2;
    private bool down_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Down {
      get { return down_; }
      set {
        down_ = value;
      }
    }

    /// <summary>Field number for the "Right" field.</summary>
    public const int RightFieldNumber = 3;
    private bool right_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Right {
      get { return right_; }
      set {
        right_ = value;
      }
    }

    /// <summary>Field number for the "Left" field.</summary>
    public const int LeftFieldNumber = 4;
    private bool left_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Left {
      get { return left_; }
      set {
        left_ = value;
      }
    }

    /// <summary>Field number for the "UpKeyPressed" field.</summary>
    public const int UpKeyPressedFieldNumber = 5;
    private bool upKeyPressed_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool UpKeyPressed {
      get { return upKeyPressed_; }
      set {
        upKeyPressed_ = value;
      }
    }

    /// <summary>Field number for the "DownKeyPressed" field.</summary>
    public const int DownKeyPressedFieldNumber = 6;
    private bool downKeyPressed_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool DownKeyPressed {
      get { return downKeyPressed_; }
      set {
        downKeyPressed_ = value;
      }
    }

    /// <summary>Field number for the "RightKeyPressed" field.</summary>
    public const int RightKeyPressedFieldNumber = 7;
    private bool rightKeyPressed_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool RightKeyPressed {
      get { return rightKeyPressed_; }
      set {
        rightKeyPressed_ = value;
      }
    }

    /// <summary>Field number for the "LeftKeyPressed" field.</summary>
    public const int LeftKeyPressedFieldNumber = 8;
    private bool leftKeyPressed_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool LeftKeyPressed {
      get { return leftKeyPressed_; }
      set {
        leftKeyPressed_ = value;
      }
    }

    /// <summary>Field number for the "F4KeyPress" field.</summary>
    public const int F4KeyPressFieldNumber = 9;
    private bool f4KeyPress_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool F4KeyPress {
      get { return f4KeyPress_; }
      set {
        f4KeyPress_ = value;
      }
    }

    /// <summary>Field number for the "F4" field.</summary>
    public const int F4FieldNumber = 10;
    private bool f4_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool F4 {
      get { return f4_; }
      set {
        f4_ = value;
      }
    }

    /// <summary>Field number for the "F5KeyReleased" field.</summary>
    public const int F5KeyReleasedFieldNumber = 11;
    private bool f5KeyReleased_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool F5KeyReleased {
      get { return f5KeyReleased_; }
      set {
        f5KeyReleased_ = value;
      }
    }

    /// <summary>Field number for the "F5" field.</summary>
    public const int F5FieldNumber = 12;
    private bool f5_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool F5 {
      get { return f5_; }
      set {
        f5_ = value;
      }
    }

    /// <summary>Field number for the "F6" field.</summary>
    public const int F6FieldNumber = 13;
    private bool f6_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool F6 {
      get { return f6_; }
      set {
        f6_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Input);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Input other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Up != other.Up) return false;
      if (Down != other.Down) return false;
      if (Right != other.Right) return false;
      if (Left != other.Left) return false;
      if (UpKeyPressed != other.UpKeyPressed) return false;
      if (DownKeyPressed != other.DownKeyPressed) return false;
      if (RightKeyPressed != other.RightKeyPressed) return false;
      if (LeftKeyPressed != other.LeftKeyPressed) return false;
      if (F4KeyPress != other.F4KeyPress) return false;
      if (F4 != other.F4) return false;
      if (F5KeyReleased != other.F5KeyReleased) return false;
      if (F5 != other.F5) return false;
      if (F6 != other.F6) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Up != false) hash ^= Up.GetHashCode();
      if (Down != false) hash ^= Down.GetHashCode();
      if (Right != false) hash ^= Right.GetHashCode();
      if (Left != false) hash ^= Left.GetHashCode();
      if (UpKeyPressed != false) hash ^= UpKeyPressed.GetHashCode();
      if (DownKeyPressed != false) hash ^= DownKeyPressed.GetHashCode();
      if (RightKeyPressed != false) hash ^= RightKeyPressed.GetHashCode();
      if (LeftKeyPressed != false) hash ^= LeftKeyPressed.GetHashCode();
      if (F4KeyPress != false) hash ^= F4KeyPress.GetHashCode();
      if (F4 != false) hash ^= F4.GetHashCode();
      if (F5KeyReleased != false) hash ^= F5KeyReleased.GetHashCode();
      if (F5 != false) hash ^= F5.GetHashCode();
      if (F6 != false) hash ^= F6.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Up != false) {
        output.WriteRawTag(8);
        output.WriteBool(Up);
      }
      if (Down != false) {
        output.WriteRawTag(16);
        output.WriteBool(Down);
      }
      if (Right != false) {
        output.WriteRawTag(24);
        output.WriteBool(Right);
      }
      if (Left != false) {
        output.WriteRawTag(32);
        output.WriteBool(Left);
      }
      if (UpKeyPressed != false) {
        output.WriteRawTag(40);
        output.WriteBool(UpKeyPressed);
      }
      if (DownKeyPressed != false) {
        output.WriteRawTag(48);
        output.WriteBool(DownKeyPressed);
      }
      if (RightKeyPressed != false) {
        output.WriteRawTag(56);
        output.WriteBool(RightKeyPressed);
      }
      if (LeftKeyPressed != false) {
        output.WriteRawTag(64);
        output.WriteBool(LeftKeyPressed);
      }
      if (F4KeyPress != false) {
        output.WriteRawTag(72);
        output.WriteBool(F4KeyPress);
      }
      if (F4 != false) {
        output.WriteRawTag(80);
        output.WriteBool(F4);
      }
      if (F5KeyReleased != false) {
        output.WriteRawTag(88);
        output.WriteBool(F5KeyReleased);
      }
      if (F5 != false) {
        output.WriteRawTag(96);
        output.WriteBool(F5);
      }
      if (F6 != false) {
        output.WriteRawTag(104);
        output.WriteBool(F6);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Up != false) {
        size += 1 + 1;
      }
      if (Down != false) {
        size += 1 + 1;
      }
      if (Right != false) {
        size += 1 + 1;
      }
      if (Left != false) {
        size += 1 + 1;
      }
      if (UpKeyPressed != false) {
        size += 1 + 1;
      }
      if (DownKeyPressed != false) {
        size += 1 + 1;
      }
      if (RightKeyPressed != false) {
        size += 1 + 1;
      }
      if (LeftKeyPressed != false) {
        size += 1 + 1;
      }
      if (F4KeyPress != false) {
        size += 1 + 1;
      }
      if (F4 != false) {
        size += 1 + 1;
      }
      if (F5KeyReleased != false) {
        size += 1 + 1;
      }
      if (F5 != false) {
        size += 1 + 1;
      }
      if (F6 != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Input other) {
      if (other == null) {
        return;
      }
      if (other.Up != false) {
        Up = other.Up;
      }
      if (other.Down != false) {
        Down = other.Down;
      }
      if (other.Right != false) {
        Right = other.Right;
      }
      if (other.Left != false) {
        Left = other.Left;
      }
      if (other.UpKeyPressed != false) {
        UpKeyPressed = other.UpKeyPressed;
      }
      if (other.DownKeyPressed != false) {
        DownKeyPressed = other.DownKeyPressed;
      }
      if (other.RightKeyPressed != false) {
        RightKeyPressed = other.RightKeyPressed;
      }
      if (other.LeftKeyPressed != false) {
        LeftKeyPressed = other.LeftKeyPressed;
      }
      if (other.F4KeyPress != false) {
        F4KeyPress = other.F4KeyPress;
      }
      if (other.F4 != false) {
        F4 = other.F4;
      }
      if (other.F5KeyReleased != false) {
        F5KeyReleased = other.F5KeyReleased;
      }
      if (other.F5 != false) {
        F5 = other.F5;
      }
      if (other.F6 != false) {
        F6 = other.F6;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Up = input.ReadBool();
            break;
          }
          case 16: {
            Down = input.ReadBool();
            break;
          }
          case 24: {
            Right = input.ReadBool();
            break;
          }
          case 32: {
            Left = input.ReadBool();
            break;
          }
          case 40: {
            UpKeyPressed = input.ReadBool();
            break;
          }
          case 48: {
            DownKeyPressed = input.ReadBool();
            break;
          }
          case 56: {
            RightKeyPressed = input.ReadBool();
            break;
          }
          case 64: {
            LeftKeyPressed = input.ReadBool();
            break;
          }
          case 72: {
            F4KeyPress = input.ReadBool();
            break;
          }
          case 80: {
            F4 = input.ReadBool();
            break;
          }
          case 88: {
            F5KeyReleased = input.ReadBool();
            break;
          }
          case 96: {
            F5 = input.ReadBool();
            break;
          }
          case 104: {
            F6 = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
